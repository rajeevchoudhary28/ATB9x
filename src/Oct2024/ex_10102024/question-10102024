1. find all the types of literals supported by java

2. give me example of these literals
    * Integer literal
    * Floating point literal
    * Character literal
    * String literal
    * Boolean literal
    * Null literal


In Java, literals are fixed values used in the code to represent data of various types. Java supports several types of literals,
each corresponding to a specific kind of data. Here are the **types of literals** supported in Java:

### 1. **Integer Literals**
   - Used to represent whole numbers (both positive and negative).
   - Can be written in decimal (base 10), octal (base 8), hexadecimal (base 16), and binary (base 2) formats.

   **Examples:**
   - Decimal: `10`, `-100`, `0`
   - Octal: `010` (representing `8` in decimal), `077`
   - Hexadecimal: `0x1A`, `0XFF` (representing `26` and `255` in decimal, respectively)
   - Binary: `0b1010`, `0B1101` (representing `10` and `13` in decimal, respectively)

   **Note:** In Java 7 and later, binary literals (using `0b` or `0B` prefix) are allowed.

   **Default type:** Integer literals are of type `int` by default. You can append `L` (or `l`) for `long` literals:
   - `100L` (long literal)
   - `100l` (long literal)

### 2. **Floating-point Literals**
   - Used to represent decimal numbers (with fractional parts).
   - Java supports two types: `float` and `double`.

   **Examples:**
   - `3.14` (double by default)
   - `3.14f` (float literal, `f` or `F` suffix is used)
   - `1.5e2` (scientific notation, equivalent to `150.0`)

   **Default type:** Floating-point literals are of type `double` by default. To specify a `float`, append `f` or `F`:
   - `3.14F` or `3.14f` (float literal)

### 3. **Character Literals**
   - Represent a single character enclosed in single quotes (`'`).
   - Can be a Unicode character, escape sequence, or a regular character.

   **Examples:**
   - `'a'` (character literal for the letter 'a')
   - `'\n'` (escape sequence for a newline)
   - `'\u0041'` (Unicode escape sequence for character 'A')

   **Default type:** `char`

### 4. **String Literals**
   - Represent a sequence of characters enclosed in double quotes (`"`).
   - Can contain any sequence of characters, including escape sequences.

   **Examples:**
   - `"Hello, World!"` (string literal)
   - `"12345"` (string literal with digits)
   - `"abc\n123"` (string with escape sequence)

   **Default type:** `String`

### 5. **Boolean Literals**
   - Represent `true` or `false` values.

   **Examples:**
   - `true`
   - `false`

   **Default type:** `boolean`

### 6. **Null Literal**
   - Represents the `null` value, which can be assigned to any reference type (objects, arrays, etc.).
   - It does not represent an actual data value but indicates that the variable is not referring to any object.

   **Example:**
   - `null`

   **Default type:** `null` is not associated with any specific type, but it can be assigned to any reference type (object, array, etc.).

### 7. **Type-specific Literals**
   - In addition to the basic types above, Java supports certain literal suffixes to explicitly indicate types:
     - **`L` / `l`**: Indicates a `long` literal (e.g., `100L`).
     - **`F` / `f`**: Indicates a `float` literal (e.g., `3.14F`).
     - **`D` / `d`**: Double literals can optionally append `D` or `d`, though this is typically not needed since `double` is the default (e.g., `3.14D`).

---

### Summary Table of Java Literals

| Literal Type         | Examples                           | Suffixes/Indicators       | Default Type       |
|----------------------|------------------------------------|---------------------------|--------------------|
| **Integer Literals**  | `10`, `100`, `0x1A`, `0b1010`      | `L`/`l` for `long`        | `int`              |
| **Floating-point**    | `3.14`, `2.71828`, `1.23e4`        | `F`/`f` for `float`       | `double`           |
| **Character**         | `'a'`, `'\n'`, `'\u0041'`          | None                      | `char`             |
| **String**            | `"Hello"`, `"Java"`                | None                      | `String`           |
| **Boolean**           | `true`, `false`                    | None                      | `boolean`          |
| **Null**              | `null`                             | None                      | Reference Types    |

---

### Conclusion:
Java supports several types of literals including integer, floating-point, character, string, boolean, and `null`.
The choice of literal depends on the type of data you're working with. Most commonly, you'll encounter numeric literals for integers
and floating-point numbers, string literals for text, and boolean literals for truth values.
