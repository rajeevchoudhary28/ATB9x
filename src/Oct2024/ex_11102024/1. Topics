11 oct 2024

--> Operators:

In Java, operators are symbols that perform operations on variables and values.
Java supports a wide range of operators that can be categorized into several types based on their functionality.
Here's a breakdown of **all types of operators** in Java:

### 1. **Arithmetic Operators**
   These operators perform basic arithmetic operations like addition, subtraction, multiplication, etc.

   - **`+`** (Addition): Adds two values.
     - Example: `int result = 5 + 3;`  // `result` will be 8
   - **`-`** (Subtraction): Subtracts one value from another.
     - Example: `int result = 5 - 3;`  // `result` will be 2
   - **`*`** (Multiplication): Multiplies two values.
     - Example: `int result = 5 * 3;`  // `result` will be 15
   - **`/`** (Division): Divides one value by another.
     - Example: `int result = 5 / 2;`  // `result` will be 2 (integer division)
   - **`%`** (Modulus): Returns the remainder of division.
     - Example: `int result = 5 % 3;`  // `result` will be 2

### 2. **Relational (Comparison) Operators**
   These operators compare two values and return a boolean result (`true` or `false`).

   - **`==`** (Equal to): Checks if two values are equal.
     - Example: `5 == 3`  // `false`
   - **`!=`** (Not equal to): Checks if two values are not equal.
     - Example: `5 != 3`  // `true`
   - **`>`** (Greater than): Checks if the left value is greater than the right.
     - Example: `5 > 3`  // `true`
   - **`<`** (Less than): Checks if the left value is less than the right.
     - Example: `5 < 3`  // `false`
   - **`>=`** (Greater than or equal to): Checks if the left value is greater than or equal to the right.
     - Example: `5 >= 3`  // `true`
   - **`<=`** (Less than or equal to): Checks if the left value is less than or equal to the right.
     - Example: `5 <= 3`  // `false`

### 3. **Logical Operators**
   These operators perform logical operations and are often used in conditional statements.

   - **`&&`** (Logical AND): Returns `true` if both conditions are true.
     - Example: `true && false`  // `false`
   - **`||`** (Logical OR): Returns `true` if either condition is true.
     - Example: `true || false`  // `true`
   - **`!`** (Logical NOT): Reverses the logical state of its operand.
     - Example: `!true`  // `false`

### 4. **Bitwise Operators**
   These operators perform bit-level operations on integer values.

   - **`&`** (Bitwise AND): Performs a bitwise AND operation.
     - Example: `5 & 3`  // `1` (in binary: 101 & 011 = 001)
   - **`|`** (Bitwise OR): Performs a bitwise OR operation.
     - Example: `5 | 3`  // `7` (in binary: 101 | 011 = 111)
   - **`^`** (Bitwise XOR): Performs a bitwise XOR operation.
     - Example: `5 ^ 3`  // `6` (in binary: 101 ^ 011 = 110)
   - **`~`** (Bitwise NOT): Inverts all the bits of the number.
     - Example: `~5`  // `-6` (inverts the bits of `5` in two's complement)
   - **`<<`** (Left shift): Shifts the bits to the left, filling with zeroes on the right.
     - Example: `5 << 1`  // `10` (in binary: 101 << 1 = 1010)
   - **`>>`** (Right shift): Shifts the bits to the right.
     - Example: `5 >> 1`  // `2` (in binary: 101 >> 1 = 10)
   - **`>>>`** (Unsigned right shift): Shifts bits to the right, fills with zeroes.
     - Example: `-5 >>> 1`  // `2147483642` (note: handles negative values differently)

### 5. **Assignment Operators**
   These operators are used to assign values to variables.

   - **`=`** (Simple assignment): Assigns a value to a variable.
     - Example: `int x = 10;`
   - **`+=`** (Addition assignment): Adds the right operand to the left operand and assigns the result.
     - Example: `x += 5;` (equivalent to `x = x + 5;`)
   - **`-=`** (Subtraction assignment): Subtracts the right operand from the left operand and assigns the result.
     - Example: `x -= 5;` (equivalent to `x = x - 5;`)
   - **`*=`** (Multiplication assignment): Multiplies the right operand by the left operand and assigns the result.
     - Example: `x *= 5;` (equivalent to `x = x * 5;`)
   - **`/=`** (Division assignment): Divides the left operand by the right operand and assigns the result.
     - Example: `x /= 5;` (equivalent to `x = x / 5;`)
   - **`%=`** (Modulus assignment): Takes the modulus of the left operand by the right operand and assigns the result.
     - Example: `x %= 5;` (equivalent to `x = x % 5;`)

### 6. **Unary Operators**
   These operators operate on a single operand.

   - **`+`** (Unary plus): Indicates a positive value (though typically redundant).
     - Example: `+5`
   - **`-`** (Unary minus): Negates the value.
     - Example: `-5`
   - **`++`** (Increment): Increases the value of the operand by 1.
     - Example: `x++` (post-increment), `++x` (pre-increment)
   - **`--`** (Decrement): Decreases the value of the operand by 1.
     - Example: `x--` (post-decrement), `--x` (pre-decrement)
   - **`!`** (Logical NOT): Reverses the truth value.
     - Example: `!true`  // `false`

### 7. **Ternary (Conditional) Operator**
   The ternary operator is a shorthand for an `if-else` statement.

   - **`? :`** (Ternary Operator): Evaluates a condition and returns one of two values.
     - Syntax: `condition ? value_if_true : value_if_false`
     - Example: `int result = (x > 5) ? 10 : 20;`  // If `x > 5`, `result` is 10, otherwise 20.

### 8. **Instanceof Operator**
   The `instanceof` operator is used to check if an object is an instance of a specific class or subclass.

   - **`instanceof`**: Checks whether an object is an instance of a class or interface.
     - Example: `if (obj instanceof String) { // do something }`

### 9. **Type Cast Operator**
   Java supports explicit type casting to convert one data type to another.

   - **`()`** (Type casting): Used to cast one type to another.
     - Example: `int x = (int) 3.14;`  // Casts the `double` value `3.14` to `int`, resulting in `3`.

---

### Summary Table of Java Operators

| Operator Type             | Example(s)                                    | Description                          |
|---------------------------|-----------------------------------------------|--------------------------------------|
| **Arithmetic Operators**   | `+`, `-`, `*`, `/`, `%`                       | Perform basic arithmetic operations  |
| **Relational Operators**   | `==`, `!=`, `>`, `<`, `>=`, `<=`              | Compare two values                   |
| **Logical Operators**      | `&&`, `||`, `!`                               | Perform logical operations           |
| **Bitwise Operators**      | `&`, `|`, `^`, `~`, `<<`, `>>`, `>>>`         | Perform bit-level operations         |
| **Assignment Operators**   | `=`, `+=`, `-=`, `*=`, `/=`, `%=`             | Assign or modify values              |
| **Unary Operators**        | `+`, `-`, `++`, `--`, `!`                     | Operate on a single operand          |
| **Ternary Operator**       | `condition ? value_if_true : value_if_false`   | Conditional operator (shorthand for if-else) |
| **Instanceof Operator**    | `obj instanceof String`                       | Check

 if an object is an instance of a class |
| **Type Cast Operator**     | `(type) value`                                | Explicitly convert between data types |

---

### Conclusion:
Java provides a rich set of operators to perform various operations on data, whether it's performing calculations, comparing values,
manipulating bits, or handling logical conditions. Understanding and effectively using these operators is crucial for writing efficient and effective Java code.
